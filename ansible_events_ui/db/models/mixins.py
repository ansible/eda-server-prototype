import uuid

import sqlalchemy as sa
from sqlalchemy import func
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import declarative_mixin


@declarative_mixin
class IntIdMixin:
    """
    Auto-increment integer primary key mixin.

    Uses `GENERATED ALWAYS AS IDENTITY` database constraint.

    .. seealso:: https://www.postgresql.org/docs/current/sql-createtable.html
    """

    id = sa.Column(sa.Integer, sa.Identity(always=True), primary_key=True)


@declarative_mixin
class BigIntIdMixin:
    """
    Auto-increment big integer primary key mixin.

    Uses `GENERATED ALWAYS AS IDENTITY` database constraint.
    """

    id = sa.Column(sa.BigInteger, sa.Identity(always=True), primary_key=True)


@declarative_mixin
class UuidMixin:
    """
    UUID primary key mixin.

    Generated by default as UUID4.
    Provides both client-side and server-side generation.

    Requires the `uuid-ossp` PostgreSQL extension.
    """

    id = sa.Column(
        postgresql.UUID,
        primary_key=True,
        default=uuid.uuid4,
        server_default=sa.text("uuid_generate_v4()"),
    )


@declarative_mixin
class TimestampMixin:
    """
    Timestamp mixin.

    Provides `created_at` and `updated_at` model fields.
    The `modified_at` field value for new records equals to `created_at` field.
    """

    created_at = sa.Column(
        sa.DateTime(timezone=True), nullable=False, server_default=func.now()
    )
    modified_at = sa.Column(
        sa.DateTime(timezone=True), nullable=True, onupdate=func.now()
    )
